name: Deploy to EKS after CodePipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PIPELINE_NAME: itw-codepipeline
      CLUSTER_NAME: itw-test-project
      AWS_REGION: ap-south-1
      AWS_DEFAULT_REGION: ap-south-1
      IMAGE_URI: 339713011246.dkr.ecr.ap-south-1.amazonaws.com/nodejs-app-repo:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::339713011246:role/github-oidc-deployer-role-v2
          role-session-name: GitHubActionsSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait for CodePipeline to complete
        shell: bash
        run: |
          echo "üîÑ Waiting for CodePipeline: $PIPELINE_NAME to complete..."

          EXEC_ID=$(aws codepipeline list-pipeline-executions \
            --pipeline-name "$PIPELINE_NAME" \
            --max-items 1 \
            --query 'pipelineExecutionSummaries[0].pipelineExecutionId' \
            --output text)

          echo "‚û°Ô∏è Latest execution ID: $EXEC_ID"

          if [[ "$EXEC_ID" == "None" || "$EXEC_ID" == "" ]]; then
            echo "‚ùå No pipeline execution found."
            exit 1
          fi

          while true; do
            STATUS=$(aws codepipeline get-pipeline-execution \
              --pipeline-name "$PIPELINE_NAME" \
              --pipeline-execution-id "$EXEC_ID" \
              --query 'pipelineExecution.status' \
              --output text)

            echo "‚è±Ô∏è Pipeline status: $STATUS"

            if [[ "$STATUS" == "Succeeded" ]]; then
              echo "‚úÖ Pipeline succeeded."
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
              echo "‚ùå Pipeline failed or was stopped."
              exit 1
            elif [[ "$STATUS" == "None" || "$STATUS" == "" ]]; then
              echo "‚ö†Ô∏è Status not yet available... retrying..."
            else
              echo "‚è≥ Pipeline still running... checking again in 15s"
            fi

            sleep 15
          done

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$AWS_REGION"

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

          kubectl rollout status deployment/node-app
          kubectl get pods -l app=node-app -o wide
          kubectl get svc node-service
          kubectl get ingress node-service
